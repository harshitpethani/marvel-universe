{"version":3,"file":"node_modules_capacitor-community_http_dist_esm_web_js.js","mappings":"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","sources":["./node_modules/@capacitor-community/http/dist/esm/cookie.js","./node_modules/@capacitor-community/http/dist/esm/request.js","./node_modules/@capacitor-community/http/dist/esm/utils.js","./node_modules/@capacitor-community/http/dist/esm/web.js"],"sourcesContent":["import { encode, decode } from './utils';\n/**\n * Set a cookie\n * @param key The key to set\n * @param value The value to set\n * @param options Optional additional parameters\n */\nexport const setCookie = (key, value, options = {}) => {\n    // Safely Encoded Key/Value\n    const encodedKey = encode(key);\n    const encodedValue = encode(value);\n    // Clean & sanitize options\n    const expires = `; expires=${(options.expires || '').replace('expires=', '')}`; // Default is \"; expires=\"\n    const path = (options.path || '/').replace('path=', ''); // Default is \"path=/\"\n    document.cookie = `${encodedKey}=${encodedValue || ''}${expires}; path=${path}`;\n};\n/**\n * Gets all HttpCookies\n */\nexport const getCookies = () => {\n    const output = [];\n    const map = {};\n    if (!document.cookie) {\n        return output;\n    }\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        // Replace first \"=\" with CAP_COOKIE to prevent splitting on additional \"=\"\n        let [k, v] = cookie.replace(/=/, 'CAP_COOKIE').split('CAP_COOKIE');\n        k = decode(k).trim();\n        v = decode(v).trim();\n        map[k] = v;\n    }\n    const entries = Object.entries(map);\n    for (const [key, value] of entries) {\n        output.push({\n            key,\n            value,\n        });\n    }\n    return output;\n};\n/**\n * Gets a single HttpCookie given a key\n */\nexport const getCookie = (key) => {\n    const cookies = getCookies();\n    for (const cookie of cookies) {\n        if (cookie.key === key) {\n            return cookie;\n        }\n    }\n    return {\n        key,\n        value: '',\n    };\n};\n/**\n * Deletes a cookie given a key\n * @param key The key of the cookie to delete\n */\nexport const deleteCookie = (key) => {\n    document.cookie = `${key}=; Max-Age=0`;\n};\n/**\n * Clears out cookies by setting them to expire immediately\n */\nexport const clearCookies = () => {\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        document.cookie = cookie\n            .replace(/^ +/, '')\n            .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n    }\n};\n","import { readBlobAsBase64 } from './utils';\n/**\n * Normalize an HttpHeaders map by lowercasing all of the values\n * @param headers The HttpHeaders object to normalize\n */\nconst normalizeHttpHeaders = (headers = {}) => {\n    const originalKeys = Object.keys(headers);\n    const loweredKeys = Object.keys(headers).map(k => k.toLocaleLowerCase());\n    const normalized = loweredKeys.reduce((acc, key, index) => {\n        acc[key] = headers[originalKeys[index]];\n        return acc;\n    }, {});\n    return normalized;\n};\n/**\n * Builds a string of url parameters that\n * @param params A map of url parameters\n * @param shouldEncode true if you should encodeURIComponent() the values (true by default)\n */\nconst buildUrlParams = (params, shouldEncode = true) => {\n    if (!params)\n        return null;\n    const output = Object.entries(params).reduce((accumulator, entry) => {\n        const [key, value] = entry;\n        let encodedValue;\n        let item;\n        if (Array.isArray(value)) {\n            item = '';\n            value.forEach(str => {\n                encodedValue = shouldEncode ? encodeURIComponent(str) : str;\n                item += `${key}=${encodedValue}&`;\n            });\n            // last character will always be \"&\" so slice it off\n            item.slice(0, -1);\n        }\n        else {\n            encodedValue = shouldEncode ? encodeURIComponent(value) : value;\n            item = `${key}=${encodedValue}`;\n        }\n        return `${accumulator}&${item}`;\n    }, '');\n    // Remove initial \"&\" from the reduce\n    return output.substr(1);\n};\n/**\n * Build the RequestInit object based on the options passed into the initial request\n * @param options The Http plugin options\n * @param extra Any extra RequestInit values\n */\nexport const buildRequestInit = (options, extra = {}) => {\n    const output = Object.assign({ method: options.method || 'GET', headers: options.headers }, extra);\n    // Get the content-type\n    const headers = normalizeHttpHeaders(options.headers);\n    const type = headers['content-type'] || '';\n    // If body is already a string, then pass it through as-is.\n    if (typeof options.data === 'string') {\n        output.body = options.data;\n    }\n    // Build request initializers based off of content-type\n    else if (type.includes('application/x-www-form-urlencoded')) {\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(options.data || {})) {\n            params.set(key, value);\n        }\n        output.body = params.toString();\n    }\n    else if (type.includes('multipart/form-data')) {\n        const form = new FormData();\n        if (options.data instanceof FormData) {\n            options.data.forEach((value, key) => {\n                form.append(key, value);\n            });\n        }\n        else {\n            for (let key of Object.keys(options.data)) {\n                form.append(key, options.data[key]);\n            }\n        }\n        output.body = form;\n        const headers = new Headers(output.headers);\n        headers.delete('content-type'); // content-type will be set by `window.fetch` to includy boundary\n        output.headers = headers;\n    }\n    else if (type.includes('application/json') ||\n        typeof options.data === 'object') {\n        output.body = JSON.stringify(options.data);\n    }\n    return output;\n};\n/**\n * Perform an Http request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const request = async (options) => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const urlParams = buildUrlParams(options.params, options.shouldEncodeUrlParams);\n    const url = urlParams ? `${options.url}?${urlParams}` : options.url;\n    const response = await fetch(url, requestInit);\n    const contentType = response.headers.get('content-type') || '';\n    // Default to 'text' responseType so no parsing happens\n    let { responseType = 'text' } = response.ok ? options : {};\n    // If the response content-type is json, force the response to be json\n    if (contentType.includes('application/json')) {\n        responseType = 'json';\n    }\n    let data;\n    switch (responseType) {\n        case 'arraybuffer':\n        case 'blob':\n            const blob = await response.blob();\n            data = await readBlobAsBase64(blob);\n            break;\n        case 'json':\n            data = await response.json();\n            break;\n        case 'document':\n        case 'text':\n        default:\n            data = await response.text();\n    }\n    // Convert fetch headers to Capacitor HttpHeaders\n    const headers = {};\n    response.headers.forEach((value, key) => {\n        headers[key] = value;\n    });\n    return {\n        data,\n        headers,\n        status: response.status,\n        url: response.url,\n    };\n};\n/**\n * Perform an Http GET request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const get = async (options) => request(Object.assign(Object.assign({}, options), { method: 'GET' }));\n/**\n * Perform an Http POST request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const post = async (options) => request(Object.assign(Object.assign({}, options), { method: 'POST' }));\n/**\n * Perform an Http PUT request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const put = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PUT' }));\n/**\n * Perform an Http PATCH request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const patch = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PATCH' }));\n/**\n * Perform an Http DELETE request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const del = async (options) => request(Object.assign(Object.assign({}, options), { method: 'DELETE' }));\n","/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = async (blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n        resolve(base64StringWithoutTags);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(blob);\n});\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\nexport const encode = (str) => encodeURIComponent(str)\n    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n    .replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\nexport const decode = (str) => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n","import { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n    constructor() {\n        super();\n        /**\n         * Perform an Http request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.request = async (options) => Request.request(options);\n        /**\n         * Perform an Http GET request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.get = async (options) => Request.get(options);\n        /**\n         * Perform an Http POST request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.post = async (options) => Request.post(options);\n        /**\n         * Perform an Http PUT request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.put = async (options) => Request.put(options);\n        /**\n         * Perform an Http PATCH request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.patch = async (options) => Request.patch(options);\n        /**\n         * Perform an Http DELETE request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.del = async (options) => Request.del(options);\n        /**\n         * Gets all HttpCookies as a Map\n         */\n        this.getCookiesMap = async (\n        // @ts-ignore\n        options) => {\n            const cookies = Cookie.getCookies();\n            const output = {};\n            for (const cookie of cookies) {\n                output[cookie.key] = cookie.value;\n            }\n            return output;\n        };\n        /**\n         * Get all HttpCookies as an object with the values as an HttpCookie[]\n         */\n        this.getCookies = async (options) => {\n            // @ts-ignore\n            const { url } = options;\n            const cookies = Cookie.getCookies();\n            return { cookies };\n        };\n        /**\n         * Set a cookie\n         * @param key The key to set\n         * @param value The value to set\n         * @param options Optional additional parameters\n         */\n        this.setCookie = async (options) => {\n            const { key, value, expires = '', path = '' } = options;\n            Cookie.setCookie(key, value, { expires, path });\n        };\n        /**\n         * Gets all cookie values unless a key is specified, then return only that value\n         * @param key The key of the cookie value to get\n         */\n        this.getCookie = async (options) => Cookie.getCookie(options.key);\n        /**\n         * Deletes a cookie given a key\n         * @param key The key of the cookie to delete\n         */\n        this.deleteCookie = async (options) => Cookie.deleteCookie(options.key);\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearCookies = async (\n        // @ts-ignore\n        options) => Cookie.clearCookies();\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearAllCookies = async () => Cookie.clearCookies();\n        /**\n         * Uploads a file through a POST request\n         * @param options TODO\n         */\n        this.uploadFile = async (options) => {\n            const formData = new FormData();\n            formData.append(options.name, options.blob || 'undefined');\n            const fetchOptions = Object.assign(Object.assign({}, options), { body: formData, method: 'POST' });\n            return this.post(fetchOptions);\n        };\n        /**\n         * Downloads a file\n         * @param options TODO\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!(options === null || options === void 0 ? void 0 : options.progress))\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                let chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        type: 'DOWNLOAD',\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                let allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            return {\n                blob,\n            };\n        };\n    }\n}\n"],"names":["readBlobAsBase64","normalizeHttpHeaders","headers","originalKeys","Object","keys","loweredKeys","map","k","toLocaleLowerCase","normalized","reduce","acc","key","index","buildUrlParams","params","shouldEncode","output","entries","accumulator","entry","value","encodedValue","item","Array","isArray","forEach","str","encodeURIComponent","slice","substr","buildRequestInit","options","extra","assign","method","type","data","body","includes","URLSearchParams","set","toString","form","FormData","append","Headers","delete","JSON","stringify","request","requestInit","webFetchExtra","urlParams","shouldEncodeUrlParams","url","response","fetch","contentType","get","responseType","ok","blob","json","text","status","post","put","patch","del","Promise","resolve","reject","reader","FileReader","onload","base64String","result","base64StringWithoutTags","indexOf","onerror","error","readAsDataURL","encode","replace","decodeURIComponent","escape","decode","WebPlugin","Cookie","Request","HttpWeb","constructor","getCookiesMap","cookies","getCookies","cookie","setCookie","expires","path","getCookie","deleteCookie","clearCookies","clearAllCookies","uploadFile","formData","name","fetchOptions","downloadFile","progress","Blob","getReader","bytes","chunks","contentLength","parseInt","done","read","push","length","notifyListeners","allChunks","Uint8Array","position","chunk","buffer","undefined"],"sourceRoot":"webpack:///"}